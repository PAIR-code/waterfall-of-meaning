"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs-extra");
var path = require("path");
var _1 = require(".");
exports.readInstallationsFile = function () {
    var storeDir = _1.getStoreMainDir();
    var installationFilePath = path.join(storeDir, _1.values.installationsFile);
    var installationsConfig;
    try {
        fs.accessSync(installationFilePath);
        try {
            installationsConfig = fs.readJsonSync(installationFilePath);
        }
        catch (e) {
            console.log('Error reading installations file', installationFilePath, e);
            installationsConfig = {};
        }
    }
    catch (e) {
        installationsConfig = {};
    }
    return installationsConfig;
};
exports.saveInstallationsFile = function (installationsConfig) {
    var storeDir = _1.getStoreMainDir();
    var installationFilePath = path.join(storeDir, _1.values.installationsFile);
    var data = JSON.stringify(installationsConfig, null, 2);
    return fs.writeFile(installationFilePath, data);
};
exports.addInstallations = function (installations) {
    var installationsConfig = exports.readInstallationsFile();
    var updated = false;
    installations
        .forEach(function (newInstall) {
        var packageInstallPaths = installationsConfig[newInstall.name] || [];
        installationsConfig[newInstall.name] = packageInstallPaths;
        var hasInstallation = !!packageInstallPaths
            .filter(function (p) { return p === newInstall.path; })[0];
        if (!hasInstallation) {
            updated = true;
            packageInstallPaths.push(newInstall.path);
        }
    });
    if (updated) {
        exports.saveInstallationsFile(installationsConfig);
    }
};
exports.removeInstallations = function (installations) {
    var installationsConfig = exports.readInstallationsFile();
    var updated = false;
    installations
        .forEach(function (install) {
        var packageInstallPaths = installationsConfig[install.name] || [];
        var index = packageInstallPaths.indexOf(install.path);
        if (index >= 0) {
            packageInstallPaths.splice(index, 1);
            updated = true;
        }
        if (!packageInstallPaths.length) {
            delete installationsConfig[install.name];
        }
    });
    if (updated) {
        exports.saveInstallationsFile(installationsConfig);
    }
};
//# sourceMappingURL=installations.js.map