"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var installations_1 = require("./installations");
var lockfile_1 = require("./lockfile");
var _1 = require(".");
exports.updatePackages = function (packages, options) {
    var lockfile = lockfile_1.readLockfile({ workingDir: options.workingDir });
    var packagesToUpdate = [];
    var installationsToRemove = [];
    if (packages.length) {
        packages.forEach(function (packageName) {
            var _a = _1.parsePackageName(packageName), name = _a.name, version = _a.version;
            if (lockfile.packages[name]) {
                if (version) {
                    lockfile.packages[name].version = version;
                }
                packagesToUpdate.push(name);
            }
            else {
                installationsToRemove.push({ name: name, version: version, path: options.workingDir });
                console.log("Did not find package " + name + " in lockfile, " +
                    "please use 'add' command to add it explicitly.");
            }
        });
    }
    else {
        packagesToUpdate = Object.keys(lockfile.packages);
    }
    var lockPackages = packagesToUpdate
        .map(function (name) { return ({
        name: lockfile.packages[name].version
            ? name + '@' + lockfile.packages[name].version : name,
        file: lockfile.packages[name].file,
        link: lockfile.packages[name].link,
    }); });
    var packagesFiles = lockPackages
        .filter(function (p) { return p.file; }).map(function (p) { return p.name; });
    _1.addPackages(packagesFiles, { workingDir: options.workingDir });
    var packagesLinks = lockPackages
        .filter(function (p) { return !p.file && !p.link; }).map(function (p) { return p.name; });
    _1.addPackages(packagesLinks, { workingDir: options.workingDir, link: true });
    var packagesLinkDep = lockPackages
        .filter(function (p) { return p.link; }).map(function (p) { return p.name; });
    _1.addPackages(packagesLinkDep, { workingDir: options.workingDir, linkDep: true });
    if (!options.noInstallationsRemove) {
        installations_1.removeInstallations(installationsToRemove);
    }
    return installationsToRemove;
};
//# sourceMappingURL=update.js.map