#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var yargs = require("yargs");
var path_1 = require("path");
var _1 = require(".");
var check_1 = require("./check");
var cliCommand = _1.values.myNameIs;
yargs
    .usage(cliCommand + ' [command] [options] [package1 [package2...]]')
    .command({
    command: '*',
    handler: function (argv) {
        var msg = 'Use `yalc help` to see available commands.';
        if (argv._[0]) {
            msg = 'Unknown commmand `' + argv._[0] + '`. ' + msg;
        }
        console.log(msg);
    }
})
    .command({
    command: 'publish',
    describe: 'Publish package in yalc local repo',
    builder: function () {
        return yargs
            .default('sig', true)
            .boolean(['push', 'knit', 'force', 'push-safe', 'sig']);
    },
    handler: function (argv) {
        var folder = argv._[1];
        _1.publishPackage({
            workingDir: path_1.join(process.cwd(), folder || ''),
            force: argv.force,
            knit: argv.knit,
            push: argv.push,
            pushSafe: argv.pushSafe,
            signature: argv.sig
        });
    }
})
    .command({
    command: 'push',
    describe: 'Publish package in yalc local repo and push to all installactions',
    builder: function () {
        return yargs
            .default('force', undefined)
            .default('sig', true)
            .boolean(['knit', 'safe', 'force', 'sig']);
    },
    handler: function (argv) {
        _1.publishPackage({
            workingDir: path_1.join(process.cwd(), argv._[1] || ''),
            force: argv.force !== undefined ? argv.force : true,
            knit: argv.knit,
            push: true,
            pushSafe: argv.safe,
            signature: argv.sig
        });
    }
})
    .command({
    command: 'add',
    describe: 'Add package from yalc repo to the project',
    builder: function () {
        return yargs
            .default('yarn', false)
            .boolean(['file', 'dev', 'save-dev', 'link', 'yarn'])
            .help(true);
    },
    handler: function (argv) {
        _1.addPackages(argv._.slice(1), {
            dev: argv.dev || argv.saveDev,
            yarn: argv.yarn,
            linkDep: argv.link,
            workingDir: process.cwd()
        });
    }
})
    .command({
    command: 'link',
    describe: 'Link package from yalc repo to the project',
    builder: function () {
        return yargs
            .default('yarn', true)
            .help(true);
    },
    handler: function (argv) {
        _1.addPackages(argv._.slice(1), {
            link: true,
            workingDir: process.cwd()
        });
    }
})
    .command({
    command: 'update',
    describe: 'Update packages from yalc repo',
    builder: function () {
        return yargs
            .help(true);
    },
    handler: function (argv) {
        _1.updatePackages(argv._.slice(1), {
            workingDir: process.cwd()
        });
    }
})
    .command({
    command: 'remove',
    describe: 'Remove packages from the project',
    builder: function () {
        return yargs
            .boolean(['retreat', 'all'])
            .help(true);
    },
    handler: function (argv) {
        _1.removePackages(argv._.slice(1), {
            retreat: argv.retreat,
            workingDir: process.cwd(),
            all: argv.all
        });
    }
})
    .command({
    command: 'retreat',
    describe: 'Remove packages from project, but leave in lock file (to be restored later)',
    builder: function () {
        return yargs
            .boolean(['all'])
            .help(true);
    },
    handler: function (argv) {
        _1.removePackages(argv._.slice(1), {
            all: argv.all,
            retreat: true,
            workingDir: process.cwd()
        });
    }
})
    .command({
    command: 'check',
    describe: 'Check package.json for yalc packages',
    builder: function () {
        return yargs.boolean(['commit'])
            .usage('check usage here')
            .help(true);
    },
    handler: function (argv) {
        var gitParams = process.env.GIT_PARAMS;
        if (argv.commit) {
            console.log('gitParams', gitParams);
        }
        check_1.checkManifest({
            commit: argv.commit,
            all: argv.all,
            workingDir: process.cwd()
        });
    }
})
    .command({
    command: 'dir',
    describe: 'Show yalc system directory',
    handler: function () {
        console.log(_1.getStoreMainDir());
    }
})
    .help('help')
    .argv;
//# sourceMappingURL=yalc.js.map